<?xml version="1.0"?>
<?xml-stylesheet href="$(ldoc.css)"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8"/>
    <title>$(ldoc.title)</title>
    <link rel="stylesheet" href="$(ldoc.css)" type="text/css"/>
</head>
<body>

<nav class="navbar">
	<div class="navbar-brand">
		<a class="navbar-item" href="">
			<img src="https://lukc.upyum.com/pkgxx/old/pkgxx.svg"/>
			<h1 class="title is-1">$(ldoc.project)</h1>
		</a>
	</div>
	<div class="navbar-menu">
	</div>
</nav>


<div id="main" class="columns">

# ldoc.kinds.put_kind_first = function () end -- don't move crap around
# local no_spaces = ldoc.no_spaces
# local use_li = ldoc.use_li
# local display_name = ldoc.display_name
# local iter = ldoc.modules.iter
# local function M(txt,item) return ldoc.markup(txt,item,ldoc.plain) end
# local nowrap = ldoc.wrap and '' or 'nowrap'

<!-- Menu -->

	<nav id="panel" class="column is-one-quarter">
# if not ldoc.single then -- reference back to project index
#  if module then
		<a href="../$(ldoc.output).$(ldoc.ext)" class="panel-block">Index</a>
#  else
		<strong class="panel-block is-active">Index</strong>
#  end
# end

# if ldoc.no_summary and module and not ldoc.one then -- bang out the functions on the side
# for kind, items in module.kinds() do
		<p class="panel-heading">$(kind)</p>
# for item in items() do
		<a href="#$(item.name)" class="panel-block">$(display_name(item))</a>
# end
# end
# end
# -------- contents of project ----------
# local this_mod = module and module.name
# for kind, mods, type in ldoc.kinds() do
#  if ldoc.allowed_in_contents(type,module) then
		<p class="panel-heading">$(kind)</p>
#  for mod in mods() do
#   local name = display_name(mod)
#   -- FIXME: That particular check is utter crap.
#   if mod.name == this_mod and mod.summary == module.summary then
		<a href="$(ldoc.ref_to_module(mod):gsub('%.html$','.'..ldoc.ext))" class="panel-block is-active">$(name)</a>
#   else
		<a href="$(ldoc.ref_to_module(mod):gsub('%.html$','.'..ldoc.ext))" class="panel-block">$(name)</a>
#   end
#  end
# end
# end

	</nav>

<div class="column is-three-quarters" id="content">
<section class="section">

	<div class="hero">
# if ldoc.body then -- verbatim HTML as contents; 'non-code' entries
	$(ldoc.body)
# elseif module then -- module documentation
		<h1 class="title is-1">$(ldoc.module_typename(module)) <code>$(module.name)</code></h1>
		<div class="hero-body">
			<p class="content">$(M(module.summary,module))</p>
			<p class="content">$(M(module.description,module))</p>
#   if module.tags.include then
			$(M(ldoc.include_file(module.tags.include)))
#   end
		</div>
	</div>
	<div id="tocs">
#   if module.see then
#     local li,il = use_li(module.see)
		<h2 class="title is-2">See also:</h2>
		<table class="table is-fullwidth">
#     for see in iter(module.see) do
			<tr>
				<td class="name"><a href="$(ldoc.href(see))">$(see.label)</a></td>
				<td class="description">$(see.mod.summary)</td>
			</tr>
#     end -- for
		</table>
#   end -- if see
#   if module.usage then
#     local li,il = use_li(module.usage)
		<p class="menu-label">Usage:</p>
		<ul class="menu-list">
#     for usage in iter(module.usage) do
			$(li)<pre class="example">$(ldoc.prettify(usage))</pre>$(il)
#     end -- for
		</ul>
#   end -- if usage
#   if module.info then
		<p class="menu-label">Info:</p>
		<ul class="menu-list">
#     for tag, value in module.info:iter() do
			<li><strong>$(tag)</strong>: $(M(value,module))</li>
#     end
		</ul>
#   end -- if module.info
	</div>


# if not ldoc.no_summary then
# -- bang out the tables of item types for this module (e.g Functions, Tables, etc)
# for kind,items in module.kinds() do
#  if kind ~= "Issues" then
	<nav>
		<h2 class="title is-2">$(kind)</h2>
		<table class="table is-fullwidth function_list">
#   for item in items() do
#    if kind == "Issues" then
#     item.name = item.name:gsub('^.*%.', '.')
#    elseif kind == "Attributes" then
#     item.name = item.name:gsub('^.*%.', '.')
#    elseif kind == "Methods" then
#     item.name = item.name:gsub('^.*\\', '\\')
#    elseif kind == "Metamethods" then
#     item.name = item.name:gsub('^.*\\', '')
#    end
			<tr>
				<td class="name $(nowrap)"><a href="#$(no_spaces(item.name))">$(display_name(item))</a></td>
				<td class="summary">$(M(item.summary,item))</td>
			</tr>
#  end -- for items
		</table>
	</nav>
#   end -- if not Issues
#end -- for kinds

#end -- if not no_summary

</section>

# --- currently works for both Functions and Tables. The params field either contains
# --- function parameters or table fields.
# local show_return = not ldoc.no_return_or_parms
# local show_parms = show_return
# for kind, items in module.kinds() do
#   local kitem = module.kinds:get_item(kind)
#   local has_description = kitem and ldoc.descript(kitem) ~= ""
#   if kind ~= "Issues" then
<section class="section">
	<h2 class="title is-2 section-header $(has_description and 'has-description')" id="$(no_spaces(kind))">
		$(kind)
		<a class="is-pulled-right button is-large is-outlined is-info" href="#$(no_spaces(kind))">
			⚓
		</a>
	</h2>
    $(M(module.kinds:get_section_description(kind),nil))
#   if kitem then
#       if has_description then
		<div class="section-description">
			$(M(ldoc.descript(kitem),kitem))
		</div>
#       end
#       if kitem.usage then
		<p>Usage:</p>
		<pre class="example">$(ldoc.prettify(kitem.usage[1]))</pre>
#       end
#   end
	<dl class="function">
#  for item in items() do
		<div class="card">
			<dt class="card-header" id="$(no_spaces(item.name))">
				<div class="card-header-title">
				<h3 class="title is-4">
					$(display_name(item))
				</h3>
				</div>
				<a class="card-header-icon" href="#$(no_spaces(item.name))">
					<span class="icon button is-info is-outlined">
						⚓
					</span>
				</a>
#   if ldoc.prettify_files and ldoc.is_file_prettified[item.module.file.filename] then
				<a style="float:right;" href="$(ldoc.source_ref(item))">line $(item.lineno)</a>
#   end
			</dt>
			<dd class="card-content">
				<div class="content">
					<p>
						$(M(ldoc.descript(item),item))
					</p>
				</div>

#   if ldoc.custom_tags then
#    for custom in iter(ldoc.custom_tags) do
#     local tag = item.tags[custom[1]]
#     if tag and not custom.hidden then
#      local li,il = use_li(tag)
				<p class="menu-label">$(custom.title or custom[1]):</p>
				<ul class="menu-list">
#      for value in iter(tag) do
					$(li)$(custom.format and custom.format(value) or M(value))$(il)
#      end -- for
#     end -- if tag
				</ul>
#    end -- iter tags
#   end

#  if show_parms and item.params and #item.params > 0 then
#    local subnames = module.kinds:type_of(item).subnames
#    if subnames then
				<p class="menu-label">$(subnames):</p>
#    end
				<ul>
#   for parm in iter(item.params) do
#     local param,sublist = item:subparam(parm)
				<table class="table is-fullwidth">
					<thead>
						<th>Type</th>
						<th>Parameter</th>
						<th>Description</th>
						<th></th>
					</thead>
					<tbody>
#     if sublist then
					<tr>
						<td class="types">
							$(ldoc.typename(item:type_of_param(sublist)))
						</td>
						<td class="parameter">
							$(sublist)
						</td>
						<td class="description">
							$(M(item.params.map[sublist], item))
						</td>
					</tr>
#     end
#     for p in iter(param) do
#        local name,tp,def = item:display_name_of(p), ldoc.typename(item:type_of_param(p)), item:default_of_param(p)
					<tr>
						<td class="types">
#       if tp ~= '' then
							$(tp)
#       end
						</td>
						<td class="parameter">
#     if sublist then
							<span class="sublist">$(sublist)</span><span class="sublist-separator">.</span><strong>$(name)</strong>
#     else
							<strong>$(name)</strong>
#     end
						</td>
						<td class="description">
					        $(M(item.params.map[p],item))
						</td>
						<td class="options">
#       if def == true then
							(<em>optional</em>)
#       elseif def then
							(<em>default</em> $(def))
#       end
#       if item:readonly(p) then
							<em>readonly</em>
#       end
						</td>
					</tr>
#     end
					</tbody>
				</table>
#   end -- for
				</ul>
#   end -- if params

#  if show_return and item.retgroups then local groups = item.retgroups
				<p class="menu-label">Returns:</p>
				<table class="table is-fullwidth">
					<thead>
						<th>Type</th>
						<th>Index</th>
						<th>Description</th>
					</thead>
					<tbody>
#   for i,group in ldoc.ipairs(groups) do local li,il = use_li(group)
						<tr>
#   for r in group:iter() do local type, ctypes = item:return_type(r); local rt = ldoc.typename(type)
							<td class="types">$(rt)</td>
							<td class="index">$(i)</td>
							<td>
								$(M(r.text,item))
#    if ctypes then
								<ul>
#    for c in ctypes:iter() do
									<li>
										<span class="parameter">$(c.name)</span>
										<span class="types">$(ldoc.typename(c.type))</span>
										$(M(c.comment,item))
									</li>
#     end
								</ul>
#    end -- if ctypes
							</td>
#   end -- for r
						</tr>
					</tbody>
				</table>
#   if i < #groups then
				<p class="menu-label">Or</p>
#   end
#   end -- for group
#   end -- if returns

#   if show_return and item.raise then
				<p class="menu-label">Raises:</p>
				$(M(item.raise,item))
#   end

# for kind, items in module.kinds() do
#  if kind == "Issues" then
#   for issue in items() do
#    local name = issue.name:gsub("^.*%.", ".")
#    local class = "danger"
#    if name:match("^" .. item.name) then
#     if name:match("warning[0-9]*$") then
#      class = "warning"
#     elseif name:match("todo[0-9]*$") then
#      class = "info"
#     end
				<div class="message is-$(class)">
					<div class="message-body">
						$(issue.summary)
					</div>
				</div>
#    end
#   end
#  end
# end

#   if item.see then
#     local li,il = use_li(item.see)
				<p class="menu-label">See also:</p>
				<table class="table is-fullwidth">
#     for see in iter(item.see) do
#      local shortLabel = see.label:gsub('^.*[\\.]', '')
#      for kind, items in module.kinds() do
#       for item in items() do
#        if item.name:match("^." .. shortLabel) then
#         see.name = item.name:match("^." .. shortLabel)
#         see.label = item.name:match("^." .. shortLabel)
#        end
#       end
#      end
					<tr>
						<td class="name">
							<a href="$(ldoc.href(see))">$(see.label)</a>
						</td>
						<td class="description">
#      if see.summary then -- FIXME: No documentation about any of this.
							$(see.summary)
#      elseif see.mod then
							$(see.mod.summary)
#      end
						</td>
					</tr>
#    end -- for
				</table>
#   end -- if see

#   if item.usage then
#     local li,il = use_li(item.usage)
				<p class="menu-label">Usage:</p>
				<ul class="menu-list">
#     for usage in iter(item.usage) do
					$(li)<pre class="example">$(ldoc.prettify(usage))</pre>$(il)
#     end -- for
				</ul>
#   end -- if usage

			</dd>
		</div>
		<br/>
# end -- for items
	</dl>
</section>
#  end
# end -- for kinds

# else -- if module; project-level contents

# if ldoc.description then
	<h1 class="title is-1">$(ldoc.project)</h1>
	<h2 class="subtitle is-3">$(M(ldoc.description,nil))</h2>
# end
# if ldoc.full_description then
	<p class="content">$(M(ldoc.full_description,nil))</p>
# end

# for kind, mods in ldoc.kinds() do
	<h2 class="title">$(kind)</h2>
# kind = kind:lower()
	<table class="table is-fullwidth">
# for m in mods() do
		<tr>
			<td class="name $(nowrap)"><a href="$(no_spaces(kind))/$(m.name).$(ldoc.ext)">$(m.name)</a></td>
			<td class="summary">$(M(ldoc.strip_header(m.summary),m))</td>
		</tr>
#  end -- for modules
	</table>
# end -- for kinds
</div>
</section>
# end -- if module

</div> <!-- id="content" -->
</div> <!-- id="main" -->

	<footer class="footer" id="about">
		<div class="content has-text-centered">
			<nav class="level">
				<div class="level-item has-text-centered">
					<div>
						<div class="heading">
							Generated by
						</div>
						<div class="title">
							<a href="http://github.com/stevedonovan/LDoc">LDoc 1.4.3</a>
						</div>
					</div>
				</div>
				<div class="level-item has-text-centered">
					<div>
						<div class="heading">
							Helped by
						</div>
						<div class="title">
							<a href="https://bulma.io/">Bulma 0.5.1</a>
						</div>
					</div>
				</div>
				<div class="level-item has-text-centered">
					<div>
						<div class="heading">
							Last updated
						</div>
						<div class="title">
							$(ldoc.updatetime)
						</div>
					</div>
				</div>
			</nav>
		</div>
	</footer> <!-- id="about" -->
</body>
</html>
